{"version":3,"sources":["components/record.js","components/wrapper.js","App.js","serviceWorker.js","index.js"],"names":["RecordButton","styled","button","_templateObject","Record","react_default","a","createElement","lib","record","this","props","className","onStop","onData","strokeColor","backgroundColor","onClick","startRecording","stopRecording","Component","MixButton","wrapper_templateObject","ProgressDot","_templateObject2","completed","ProgressWrapper","div","_templateObject3","MixButtonWrapper","_templateObject4","ReplayButton","soundFile","file","replayIndex","index","audioSource","Audio","src","play","Wrapper","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","state","recordFile","bind","assertThisInitialized","recordedBlob","console","log","prevState","toConsumableArray","concat","blobURL","numCircles","circles","i","bgcolor","push","key","list","map","item","empties","renderGreyCircles","length","App","wrapper","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d0fb926.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { ReactMic } from 'react-mic';\n\nconst RecordButton = styled.button`\n\tcolor: black;\n\tborder: 1px solid black;\n\tmargin: 20px 20px;\n\tborder-radius: 80px;\n\twidth: 40px;\n\theight: 40px;\n\tfont-size: 16px;\n\n\t:hover {\n\t\tcolor: red;\n\t\tborder-color: red;\n\t}\n`\n\nclass Record extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t<ReactMic\n\t\t\t\trecord={this.props.record}\n\t\t        className=\"sound-wave\"\n\t\t        onStop={this.props.onStop}\n\t\t        onData={this.props.onData}\n\t\t        strokeColor=\"#000000\"\n\t\t        backgroundColor=\"#ffffff\" />\n\t\t\t<div>\n\t\t\t\t<RecordButton onClick={this.props.startRecording}>&#9679;</RecordButton>\n\t\t\t\t<RecordButton onClick={this.props.stopRecording}>&#9632;</RecordButton>\n\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Record;\n\n\n\n\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Record from './record.js';\n\nconst MixButton = styled.button`\n  color: white;\n  background-color: #d3d3d3;\n  border: none;\n  font-size: 14px;\n  margin-top: 20px;\n  width: 40px;\n  height: 40px;\n\n  :hover {\n    background-color: black;\n  }\n`\nconst ProgressDot = styled.button`\n\tbackground-color: ${props => props.completed};\n\tborder-radius: 30px;\n\twidth: 10px;\n\theight: 10px;\n\tborder: none;\n\tcolor: white;\n\tmargin: 1px 1px;\n\tpadding: 0px 0px;\n`\n\nconst ProgressWrapper = styled.div`\n\tborder: 1px solid #dbe0de;\n\twidth: 130px;\n\tborder-radius: 30px;\n\tmargin: 30px auto;\n`\nconst MixButtonWrapper = styled.div`\n\tdisplay: inline;\n\tmargin-right: 2px;\n`\n\nfunction ReplayButton(props) {\n  let soundFile = props.file;\n  let replayIndex = props.index;\n\n  function play () {\n    var audioSource = new Audio();\n    audioSource.src = soundFile\n    audioSource.play();\n  }\n  \n  return (\n    <MixButtonWrapper>\n      <MixButton onClick={play}>{replayIndex + 1}</MixButton>\n    </MixButtonWrapper>\n  )\n}\n\n\nclass Wrapper extends Component {\n\tconstructor(props) {\n\t    super(props);\n\t    this.state = {\n\t      record: false,\n\t      recordFile: []\n\t    }\n\n    \tthis.onStop = this.onStop.bind(this);\n  \t}\n\n\tstartRecording = () => {\n\t    this.setState({\n\t      record: true\n\t    });\n\t}\n\n\tstopRecording = () => {\n\t    this.setState({\n\t      record: false\n\t    });\n\t}\n\n\tonData(recordedBlob) {\n\t    // console.log('chunk of real-time data is: ', recordedBlob);\n\t}\n\n\tonStop(recordedBlob) {\n\t    console.log('recordedBlob is: ', recordedBlob);\n\t    this.setState(prevState => ({\n\t      recordFile: [...prevState.recordFile, recordedBlob.blobURL]\n\t    }))\n\t}\n\n\trenderGreyCircles(numCircles){\n\t\tlet circles = [];\n\t\tfor (var i = 0; i < 10; i++){\n\t\t\tif (numCircles == i+1 || numCircles > i+1) {\n\t\t\t\tvar bgcolor = \"#4df2b0\"; //green\n\t\t\t} else {\n\t\t\t\tvar bgcolor = \"#dbe0de\"; //grey\n\t\t\t}\n\t\t\tcircles.push(<ProgressDot key={'empty_'+i} completed={bgcolor}/>)\n\t\t}\n\t\treturn circles\n\t}\n\n\trender() {\n\t    const list = this.state.recordFile.map((item, i) => {\n\t      return <ReplayButton key={i} file={item} index={i}/>\n\t    })\n\n\t    const empties = this.renderGreyCircles(this.state.recordFile.length)\n\n\t    return (\n\t    \t<div>\n\t        <Record \n\t            record={this.state.record}\n\t            onStop={this.onStop}\n\t            onData={this.onData} \n\t            startRecording={this.startRecording}\n\t            stopRecording={this.stopRecording}/>\n\t        <ProgressWrapper>{empties}</ProgressWrapper>\n\t        {list}\n\t        \n\t      </div>\n\t    );\n\t}\n}\n\nexport default Wrapper;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from './components/wrapper.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <p>\n          <code>beat rockers aww yea</code>\n        </p>\n       <Wrapper />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}